#!/usr/bin/env bash
#
# to run this script via cli:
#
# `curl -sSL https://git.io/2nPUsQ | bash`
#
###############################################################################

SRC=~/src
INSTALL=()
OS=$(uname)

SUBLIME_PKGS_DIR=~/Library/Application\ Support/Sublime\ Text\ 3/Installed\ Packages
SUBLIME_PC=Package\ Control.sublime-package
SUBLIME_PC_FILE=${SUBLIME_PKGS_DIR}/${SUBLIME_PC}

curl=$(which curl)


download(){
    local url="$1"; shift
    local tempfile="$1"
    $curl --silent --location -o ${tempfile} ${url}
}

check_git(){
    echo 'checking git...'
    local missing=0
    [ -z "$(which git)" ] && missing=1
    if [ "$missing" -eq 1 ]; then
        echo 'git is missing'
        INSTALL+=("git")
    fi
}

check_homebrew(){
    echo 'checking homebrew...'
    local missing=0
    [ -z "$(which brew)" ] && missing=1
    if [ -n "$(which brew)" ]; then
        [ "$(brew help |grep -o Example)" != Example ] && missing=1
    fi
    if [ "$missing" -eq 1 ]; then
        echo 'homebrew is missing'
        INSTALL+=("homebrew")
    fi
}

check_vagrant(){
    echo 'checking vagrant...'
    local missing=0
    [ -z "$(which vagrant)" ] && missing=1
    if [ "$missing" -eq 1 ]; then
        echo 'vagrant is missing'
        INSTALL+=("vagrant")
    fi
}

check_virtualbox(){
    echo 'checking virtualbox...'
    local missing=0
    [ -z "$(which vboxwebsrv)" ] && missing=1
    if [ "$missing" -eq 1 ]; then
        echo 'virtualbox is missing'
        INSTALL+=("virtualbox")
    fi
}

check_virtualbox_deps(){
    echo 'checking virtualbox-deps...'
    local missing=0
    [ -z "$(which VBoxManage)" ] && missing=1
    if [ -n "$(which VBoxManage)" ]; then
        [ "$(VBoxManage list extpacks)" = "Extension Packs: 0" ] && missing=1
    fi
    if [ "$missing" -eq 1 ]; then
        echo "virtualbox-extpack is missing"
        INSTALL+=("virtualbox_extpack")
    fi
}

check_pip(){
    echo 'checking pip...'
    local missing=0
    [ -z "$(which pip)" ] && missing=1
    if [ -n "$(which pip)" ]; then
        [ "$(pip --help |grep -o Usage)" != Usage ] && missing=1
    fi
    if [ "$missing" -eq 1 ]; then
        echo 'pip is missing'
        INSTALL+=("pip")
    fi
}

check_ansible_deps(){
    echo 'checking ansible-deps...'
    local missing=0
    local deps=(paramiko PyYAML Jinja2 httplib2)
    for pkg in ${deps[@]}; do
        [ -z "$(pip freeze |grep $pkg)" ] && missing=1
        if [ "$missing" -eq 1 ]; then
            echo "$pkg is missing"
            sudo pip install $pkg
        fi
    done
}

check_sublime_package_control(){
    echo 'checking sublime-package-control...'
    local missing=0
    [ ! -f "$SUBLIME_PC_FILE" ] && missing=1
    if [ "$missing" -eq 1 ]; then
        echo 'sublime-package-control is missing'
        install_sublime_package_control
    fi
}

check_sublime(){
    echo 'checking sublime...'
    local missing=0
    [ -z "$(ls -l /Applications/ |grep 'Sublime Text.app')"  ] && missing=1
    if [ "$missing" -eq 1 ]; then
        echo 'sublime is missing'
        INSTALL+=("sublime")
    fi
    if [ "$missing" -eq 0 ]; then
        check_sublime_package_control
    fi
}

check_iterm2(){
    echo 'checking iterm2...'
    local missing=1
    [ -z "$(ls -l /Applications/ |grep iTerm.app)"  ] && missing=1
    if [ "$missing" -eq 1 ]; then
        echo 'iterm2 is missing'
        INSTALL+=("iterm2")
    fi
}

check_deps(){
    check_git
    check_homebrew
    check_vagrant
    check_virtualbox
    check_virtualbox_deps
    #check_pip
    #check_ansible_deps
    #check_sublime
    #check_iterm2
}

dedup_deps(){
    local install_git=0
    local install_homebrew=0
}

install_xcode(){
    echo 'checking xcode cli tools and installing if necessary...'
    xcode_string="xcode-select: note: install requested for command line developer tools\n"
    xcode_check=$(xcode-select --install)
    echo "${xcode_check}"
    while [[ "${xcode_check}" == "${xcode_string}" ]]; do
        xcode_check=$(xcode-select --install)
        sleep 1
    done
}

install_git(){
    install_homebrew
}

install_homebrew(){
    echo 'installing homebrew...'
    local hb_url=https://raw.githubusercontent.com/Homebrew/install/master/install
    ruby -e "$($curl -fSL ${hb_url})"
}

install_pip(){
    echo 'installing pip...'
    local dl_url=https://raw.github.com/pypa/pip/master/contrib/get-pip.py
    local pip_tmp=/tmp/get-pip.py
    [ ! -f "${pip_tmp}" ] && download ${dl_url} ${pip_tmp}
    sudo python ${pip_tmp}
}

get_latest_version_virtualbox(){
    local latest_url=${VBOX_URL}/LATEST.TXT
    local latest_tmp=/tmp/vboxversion
    local version=$(download ${latest_url} ${latest_tmp} && cat ${latest_tmp})
    echo ${version}
}

get_latest_build_virtualbox(){
    local sha_url=${VBOX_URL}/${VBOX_VERSION}/SHA256SUMS
    local sha_tmp=/tmp/vbshasums
    local build=$(download ${sha_url} ${sha_tmp} && \
                  grep dmg ${sha_tmp} |awk -F- "{print \$3}")
    echo ${build}
}

install_virtualbox(){
    echo 'installing virtualbox...'
    local dl_url=${VBOX_URL}/${VBOX_VERSION}
    local dmg_url=${dl_url}/VirtualBox-${VBOX_VERSION}-${VBOX_BUILD}-OSX.dmg
    local dmg_tmp=/tmp/VirtualBox-${VBOX_VERSION}-${VBOX_BUILD}-OSX.dmg
    [ ! -f "${dmg_tmp}" ] && download ${dmg_url} ${dmg_tmp}
    hdiutil attach -mountpoint /Volumes/VirtualBox ${dmg_tmp}
    sudo /usr/sbin/installer -pkg /Volumes/VirtualBox/VirtualBox.pkg -target /
    hdiutil detach /Volumes/VirtualBox
}

install_virtualbox_extpack(){
    echo 'installing virtualbox-extpack...'
    local dl_url=${VBOX_URL}/${VBOX_VERSION}
    local fname=Oracle_VM_VirtualBox_Extension_Pack-${VBOX_VERSION}.vbox-extpack
    local ep_url=${dl_url}/${fname}
    local ep_tmp=/tmp/${fname}
    [ ! -f "${ep_tmp}" ] && download ${ep_url} ${ep_tmp}
    /usr/bin/VBoxManage extpack install ${ep_tmp}
}

install_vagrant(){
    echo 'installing vagrant...'
    local version=1.8.4
    local dl_url=https://releases.hashicorp.com/vagrant/${version}/vagrant_${version}
    local dmg_url=${dl_url}.dmg
    local sha_url=${dl_url}_SHA256SUMS
    local dmg_tmp=/tmp/Vagrant_${version}.dmg
    [ ! -f "${dmg_tmp}" ] && download ${dmg_url} ${dmg_tmp}
    hdiutil attach -mountpoint /Volumes/Vagrant ${dmg_tmp}
    sudo /usr/sbin/installer -allowUntrusted -pkg /Volumes/Vagrant/vagrant.pkg -target /
    hdiutil detach /Volumes/Vagrant
}

install_sublime_package_control(){
    echo 'installing sublime-package-control...'
    local dl_url=https://sublime.wbond.net/Package%20Control.sublime-package
    local dl_tmp=/tmp/sublime-package-control
    [ ! -f "${dl_tmp}" ] && download ${dl_url} ${dl_tmp}
    [ ! -d "${SUBLIME_PKGS_DIR}" ] && mkdir -p "${SUBLIME_PKGS_DIR}"
    cp ${dl_tmp} "${SUBLIME_PC_FILE}"
}

install_sublime(){
    echo 'installing sublime...'
    local build=3126
    local dl_url=https://download.sublimetext.com
    local dmg_url=${dl_url}/Sublime%20Text%20Build%20${build}.dmg
    local dmg_tmp=/tmp/SublimeText${build}.dmg
    [ ! -f "${dmg_tmp}" ] && download ${dmg_url} ${dmg_tmp}
    hdiutil attach -mountpoint /Volumes/SublimeText${build} ${dmg_tmp}
    sudo cp -r /Volumes/SublimeText${build}/Sublime\ Test.app /Applications/
    hdiutil detach /Volumes/SublimeText${build}
    install_sublime_package_control
}

install_iterm2(){
    echo 'installing iterm2...'
    local version=v2_0
    local zip_file=iTerm2_${version}.zip
    local zip_url=https://iterm2.com/downloads/stable/${zip_file}
    local zip_tmp=/tmp/${zip_file}
    local zip_app=/tmp/iTerm.app
    [ ! -f "${zip_tmp}" ] && download ${zip_url} ${zip_tmp}
    unzip ${zip_tmp}
    sudo cp -r ${zip_app} /Applications/
}

install_brew_bundle(){
    echo 'installing brew-bundle...'
    local build_dir=/tmp/sn-brew-bundle
    local brewfile_url=https://git.io/vbc7u  # Brewfile in this repo
    local brewfile_tmp=${build_dir}/Brewfile
    [ ! -d "${build_dir}" ] && mkdir -p ${build_dir}
    [ -f "${brewfile_tmp}" ] && rm -f ${brewfile_tmp}
    download ${brewfile_url} ${brewfile_tmp}
    cd ${build_dir}
    brew bundle && rm -rf ${build_dir}
}

install_deps(){
    if [  "${#INSTALL[*]}" -gt 0 ]; then
        echo -e "\n${#INSTALL[*]} dependencies to install: ${INSTALL[*]}"
        for dep in ${INSTALL[@]}; do
            echo -e "\nInstalling ${dep}..."
            install_${dep}
        done
    fi
}

install(){
    install_xcode
    check_deps
    install_deps
    install_brew_bundle
    check_sublime_package_control
}

VBOX_URL=http://download.virtualbox.org/virtualbox
VBOX_VERSION=5.0.10
VBOX_BUILD=104061

install
